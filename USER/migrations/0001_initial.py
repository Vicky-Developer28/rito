# Generated by Django 4.2.7 on 2025-10-27 05:12

import USER.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-is_accepted', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('membership_type', models.CharField(choices=[('developer', 'Developer'), ('researcher', 'Researcher'), ('student', 'Student'), ('government', 'Government Official'), ('industry', 'Industry Professional'), ('citizen', 'Concerned Citizen')], max_length=20)),
                ('organization', models.CharField(blank=True, max_length=255)),
                ('interests', models.TextField(help_text='Areas of interest or expertise')),
                ('join_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('bio', models.TextField(blank=True, help_text='Short bio about yourself')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='community/profiles/')),
                ('website', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('reputation_score', models.IntegerField(default=0)),
                ('questions_asked', models.IntegerField(default=0)),
                ('answers_given', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Community Member',
                'verbose_name_plural': 'Community Members',
                'ordering': ['-join_date'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_read', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Contact Message',
                'verbose_name_plural': 'Contact Messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ieda', models.CharField(max_length=64, unique=True)),
                ('mac_address', models.CharField(max_length=17, unique=True)),
                ('registration_code', models.CharField(default=USER.models.generate_registration_code, max_length=6)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RitoAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='ERROR', max_length=100)),
                ('rito_id', models.CharField(default=USER.models.generate_rito_id, max_length=20, unique=True)),
                ('public_key', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='USER.device')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Subscriber',
                'verbose_name_plural': 'Subscribers',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='followed_topics', to='USER.communitymember')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_spaces', to='USER.communitymember')),
                ('members', models.ManyToManyField(blank=True, related_name='joined_spaces', to='USER.communitymember')),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_spaces', to='USER.communitymember')),
                ('topics', models.ManyToManyField(blank=True, related_name='spaces', to='USER.topic')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=300, unique=True)),
                ('content', models.TextField(help_text='Detailed description of your question')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('views', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='USER.communitymember')),
                ('downvotes', models.ManyToManyField(blank=True, related_name='downvoted_questions', to='USER.communitymember')),
                ('followers', models.ManyToManyField(blank=True, related_name='followed_questions', to='USER.communitymember')),
                ('topics', models.ManyToManyField(related_name='questions', to='USER.topic')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='upvoted_questions', to='USER.communitymember')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('verb', models.CharField(choices=[('answer', 'New Answer'), ('comment', 'New Comment'), ('upvote', 'Upvote'), ('follow', 'New Follower'), ('mention', 'Mention'), ('space_invite', 'Space Invitation')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acted_notifications', to='USER.communitymember')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='USER.communitymember')),
                ('target_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='USER.answer')),
                ('target_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='USER.question')),
                ('target_space', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='USER.space')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='USER.answer')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='USER.communitymember')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='upvoted_comments', to='USER.communitymember')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='answer',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='USER.communitymember'),
        ),
        migrations.AddField(
            model_name='answer',
            name='downvotes',
            field=models.ManyToManyField(blank=True, related_name='downvoted_answers', to='USER.communitymember'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='USER.question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='upvotes',
            field=models.ManyToManyField(blank=True, related_name='upvoted_answers', to='USER.communitymember'),
        ),
        migrations.CreateModel(
            name='SpaceQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('posted_at', models.DateTimeField(auto_now_add=True)),
                ('posted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='USER.communitymember')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_questions', to='USER.question')),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='USER.space')),
            ],
            options={
                'ordering': ['-posted_at'],
                'unique_together': {('question', 'space')},
            },
        ),
        migrations.CreateModel(
            name='SocialMediaAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('instagram', 'Instagram'), ('youtube', 'YouTube')], max_length=20)),
                ('platform_id', models.CharField(max_length=100)),
                ('username', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rito_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to='USER.ritoaccount')),
            ],
            options={
                'unique_together': {('rito_account', 'platform')},
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarked_by', to='USER.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='USER.communitymember')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'question')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together={('question', 'author')},
        ),
    ]
